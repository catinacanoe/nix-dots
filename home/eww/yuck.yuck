(defwidget dock_block [?class ?visible]
    (box :orientation "horizontal" :class "dock-block ${class}"
         :hexpand false :space-evenly false :visible {visible?:true}
        (children)
    )
)

(defwidget dock_layout [mon]
    (centerbox :orientation "horizontal" :class "dock-layout" :valign "center"
        (dock_left)
        (dock_middle :mon mon)
        (dock_right)
    )
)

(defvar var_switching_ws '[false, false]')
(defvar var_active_ws '[1, 11]')
(defvar var_prev_ws   '[1, 11]')
(defvar var_workspaces '[{"id":"1","windows":0}, {"id":"11","windows":0}]')
(defwidget dock_middle [mon]
    (dock_block :class "dark_col"
        (box :class "dock-widget" :space-evenly false
            (for workspace in var_workspaces
                (box :orientation "vertical" :space-evenly false :visible {mon*10 < workspace.id && workspace.id <= mon*10+8}
                    (box :class "dock-workspace-pad")
                    (box :class "dock-workspaces ${workspace.windows == 0 ? "empty_ws" : ""} ${workspace.windows >= 1 ? "populated_ws" : ""} ${var_switching_ws[mon] ? (workspace.id == var_active_ws[mon] ? "active switching" : ((workspace.windows > 0 ? "occupied" : "empty") + (workspace.id == var_prev_ws[mon] ? " switching" : ""))) : (workspace.id == var_active_ws[mon] ? "active" : (workspace.windows > 0 ? "occupied" : "empty"))}")
                    (box :class "dock-workspace-pad")
                )
            )
        )
    )
)

(defvar var_mus_color "mus-gradient")
(defvar var_mus_playing false)
(defwidget dock_left []
    (box :hexpand false :space-evenly false :spacing 7 :halign "start"
        (dock_block :class "music dark_col" (dock_volume))
        (dock_block :class "music dark_col" :visible {var_mus_current != ""} (dock_mus_current))
        (dock_block :class "music dark_col" :visible {var_mus_current != ""} (dock_mus_progress))
        (dock_block :class "music dark_col" :visible {var_cava != var_cava_flatline} (dock_mus_cava))
    )
)

(defwidget dock_right []
    (box :hexpand false :space-evenly false :spacing 7 :halign "end"
        (dock_block :class "dark_col" :visible {var_hostname == "nixpad"} (dock_brightness))
        (dock_block :class "dark_col" :visible {var_hostname == "nixpad" && var_battery != ""} (dock_battery))
        (dock_block :class "dark_col" :visible {poll_net_name != ""} (dock_net))
        (dock_block :class "dark_col" (dock_date))
    )
)

(defwidget dock_widget [?visible]
    (box :class "dock-widget" :valign "center" :visible {visible?:true}
        (children)
    )
)

(defvar var_mus_current "")
(defvar var_mus_indicator "")
(defwidget dock_mus_current []
    (dock_widget
        (label
            :text "${var_mus_indicator}${var_mus_current}"
            :class "dock-mus-current"
        )
    )
)

(defvar var_mus_progress 0)
(defwidget dock_mus_progress []
    (progress
        :valign "center"
        :class "dock-mus-progress"
        :value var_mus_progress
    )
)

(defvar var_cava "")
(defvar var_cava_flatline "")
(defwidget dock_mus_cava []
    (dock_widget
        (label
            :valign "center"
            :class "dock-mus-cava"
            :text "${var_cava}"
        )
    )
)

(defvar var_net_vpn "")
(defpoll poll_net_name :interval "2s" `nmcli -t connection show --active | grep -v 'loopback' | head -n 1 | awk -F : '{ print $1 }' | tr '[:upper:]' '[:lower:]'`)
(defvar var_net_check "")
(defwidget dock_net []
    (dock_widget
        (label
            :text "${var_net_vpn}${poll_net_name}${var_net_check}"
            :class "dock-net"
        )
    )
)

(defvar var_audio_device "")
(defvar var_volume "0")
(defwidget dock_volume []
    (dock_widget
        (label
            :text "${var_volume}%${var_audio_device}"
            :class "dock-volume"
        )
    )
)

(defvar var_brightness "100")
(defwidget dock_brightness []
    (dock_widget
        (label
            :text "${var_brightness}%"
            :class "dock-brightness"
        )
    )
)

(defvar var_battery "100%")
(defwidget dock_battery []
    (dock_widget
        (label
            :text var_battery
            :class "dock-battery"
        )
    )
)

(defpoll poll_date :interval "1s" `date +'%d.%m.%Y ~ %H:%M'`)
(defwidget dock_date []
    (dock_widget
        (label
            :text poll_date
            :class "dock-date"
        )
    )
)
