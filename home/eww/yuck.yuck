;; FUCL FUCK FUCK FUCK FUCK
(defwidget dock_block [halign]
    (box :orientation "horizontal" :class "dock-block"
         :hexpand false :halign halign :spacing 7 :space-evenly false
        (children)
    )
)

(defwidget dock_layout []
    (box :orientation "horizontal" :class "dock-layout" :valign "center"
        (dock_left) (dock_middle) (dock_right)
    )
)

(defwidget dock_left []
    (dock_block :halign "start"
        "music stuff"
    )
)

(deflisten listen_switching `tail -F ./listen/workspace-switching | awk '{ print $1 }'`)
(deflisten listen_active `tail -F ./listen/workspace-active`)
(deflisten listen_prev `tail -F ./listen/workspace-prev`)
(deflisten listen_workspaces :initial "[]" `./script/workspaces.sh`)
(defwidget dock_middle []
    (dock_block :halign "center"
        (box :class "dock-widget" :space-evenly false
            (for workspace in listen_workspaces
                (box :orientation "vertical" :space-evenly false
                    (box :class "dock-workspace-pad")
                    (box :class "dock-workspaces ${listen_switching ? (workspace.id == listen_active ? "active switching" : ((workspace.windows > 0 ? "occupied" : "empty") + (workspace.id == listen_prev ? " switching" : ""))) : (workspace.id == listen_active ? "active" : (workspace.windows > 0 ? "occupied" : "empty"))}")
                    (box :class "dock-workspace-pad")
                )
            )
        )
    )
)

(defwidget dock_widget []
    (box :class "dock-widget" :valign "center"
        (children)
    )
)

(deflisten listen_net_vpn `tail -F ./listen/net-vpn`)
(defpoll poll_net_name :interval "5s" `nmcli -t device wifi list --rescan no | grep '^*' | awk -F ':' '{ print $8 }' | grep -o '^..' | tr '[:upper:]' '[:lower:]'`)
(deflisten listen_net_check `tail -F ./listen/net-check`)
(defwidget dock_net []
    (dock_widget
        (label
            :text "${listen_net_vpn}${poll_net_name}${listen_net_check}"
            :class "dock-net"
        )
    )
)

(deflisten listen_audio_device `tail -F ./listen/audio-device`)
(deflisten listen_volume `tail -F ./listen/volume`)
(defwidget dock_volume []
    (dock_widget
        (label
            :text "${listen_volume}%${listen_audio_device}"
            :class "dock-volume"
        )
    )
)

(deflisten listen_brightness `tail -F ./listen/brightness`)
(defwidget dock_brightness []
    (dock_widget
        (label
            :text "${listen_brightness}%"
            :class "dock-brightness"
        )
    )
)

(defpoll poll_battery :interval "5s" `./script/battery.sh`)
(defwidget dock_battery []
    (dock_widget
        (label
            :text poll_battery
            :class "dock-battery"
        )
    )
)

(defpoll poll_time :interval "1s" `date +'%d.%m.%Y ~ %H:%M'`)
(defwidget dock_time []
    (dock_widget
        (label
            :text poll_time
            :class "dock-time"
        )
    )
)
